interface WalletBalance {
    currency: string;
    amount: number;
    blockchain: string;
  }
  
  interface Props extends BoxProps {}
  
  const WalletPage: React.FC<Props> = (props) => {
    const { children, ...rest } = props;
    const balances = useWalletBalances();
    const prices = usePrices();
  
    const getPriority = (blockchain: string): number => {
      const priorities: Record<string, number> = {
        Osmosis: 100,
        Ethereum: 50,
        Arbitrum: 30,
        Zilliqa: 20,
        Neo: 20,
      };
      return priorities[blockchain] ?? -99;
    };
  
    const sortedBalances = useMemo(() => {
      return balances
        .filter((balance) => getPriority(balance.blockchain) > -99 && balance.amount > 0)
        .sort((a, b) => getPriority(b.blockchain) - getPriority(a.blockchain));
    }, [balances]);
  
    return (
      <div {...rest}>
        {sortedBalances.map((balance) => (
          <WalletRow
            className={classes.row}
            key={balance.currency}
            amount={balance.amount}
            usdValue={prices[balance.currency] * balance.amount}
            formattedAmount={balance.amount.toFixed(2)}
          />
        ))}
      </div>
    );
  };
  